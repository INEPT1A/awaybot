import os, time
from telethon import TelegramClient, events
from telethon.sessions import StringSession  # üõ†Ô∏è –≠–¢–û–ì–û –ù–ï –•–í–ê–¢–ê–õ–û
from telethon.tl.types import User

api_id = int(os.environ['API_ID'])
api_hash = os.environ['API_HASH']
session_string = os.environ['SESSION']

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Å—Å–∏—é –∏–∑ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–≤—Ç–æ–ª–æ–≥–∏–Ω–∞
client = TelegramClient(StringSession(session_string), api_id, api_hash)

AUTO_REPLY_TEXT = "–û–∂–∏–¥–∞–π, –æ—Ç–≤–µ—á—É –ø–æ–∑–∂–µ ‚è≥"
COOLDOWN_SECONDS = 300

last_replies = {}
enabled = True

@client.on(events.NewMessage(incoming=True))
async def auto_reply(event):
    sender = await event.get_sender()
    if not isinstance(sender, User) or sender.bot or event.is_group or event.is_channel:
        return
    if not enabled:
        return
    now = time.time()
    uid = sender.id
    if uid not in last_replies or now - last_replies[uid] >= COOLDOWN_SECONDS:
        await event.reply(AUTO_REPLY_TEXT)
        last_replies[uid] = now

@client.on(events.NewMessage(outgoing=True, pattern=r'^\.away (on|off)$'))
async def toggle(event):
    global enabled
    enabled = event.pattern_match.group(1) == 'on'
    await event.reply(f"–ê–§–ö –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç {'–≤–∫–ª—é—á—ë–Ω ‚úÖ' if enabled else '–≤—ã–∫–ª—é—á–µ–Ω ‚ùå'}.")

print("–ê–§–ö-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
client.start()
client.run_until_disconnected()
